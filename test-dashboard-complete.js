const axios = require('axios');

async function testDashboardComplete() {
  try {
    console.log('üîÑ Testing complete dashboard flow...\n');
    
    // Step 1: Login to get a proper access token
    console.log('1. üîë Logging in to get access token...');
    const loginResponse = await axios.post('http://localhost:3000/api/auth/login', {
      email: 'aamir@example.com',
      password: 'aamir123'
    });
    
    if (!loginResponse.data.success) {
      console.log('‚ùå Login failed:', loginResponse.data.message);
      return;
    }
    
    const accessToken = loginResponse.data.data.access_token;
    console.log('‚úÖ Login successful');
    
    // Step 2: Test dashboard API with proper token
    console.log('\n2. üìä Testing dashboard API...');
    const dashboardResponse = await axios.get('http://localhost:3000/api/analytics/dashboard', {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (dashboardResponse.status === 200 && dashboardResponse.data.success) {
      const { data } = dashboardResponse.data;
      
      console.log('‚úÖ Dashboard API Response Success!');
      console.log('\nüìä Dashboard Overview:');
      console.log(`‚Ä¢ Total Campaigns: ${data.overview.campaignsCount}`);
      console.log(`‚Ä¢ Total Leads: ${data.overview.totalLeads}`);
      console.log(`‚Ä¢ Total Spent: ‚Çπ${data.overview.totalSpent.toFixed(2)}`);
      console.log(`‚Ä¢ Average Cost/Lead: ‚Çπ${data.overview.avgCostPerLead.toFixed(2)}`);
      console.log(`‚Ä¢ Facebook Results: ${data.overview.facebookResults}`);
      console.log(`‚Ä¢ Zoho Results: ${data.overview.zohoResults}`);
      
      // Check for new columns from migration
      console.log('\nüÜï New Migration Columns:');
      if (data.overview.avgFacebookCostPerLead !== undefined) {
        console.log(`‚Ä¢ Avg Facebook Cost/Lead: ‚Çπ${data.overview.avgFacebookCostPerLead.toFixed(2)}`);
        console.log('‚úÖ avgFacebookCostPerLead column is present!');
      } else {
        console.log('‚ùå Missing: avgFacebookCostPerLead column');
      }
      
      if (data.overview.avgZohoCostPerLead !== undefined) {
        console.log(`‚Ä¢ Avg Zoho Cost/Lead: ‚Çπ${data.overview.avgZohoCostPerLead.toFixed(2)}`);
        console.log('‚úÖ avgZohoCostPerLead column is present!');
      } else {
        console.log('‚ùå Missing: avgZohoCostPerLead column');
      }
      
      // Check top campaigns
      if (data.topCampaigns && data.topCampaigns.length > 0) {
        console.log('\nüèÜ Top Campaigns (with enhanced data):');
        data.topCampaigns.slice(0, 3).forEach((campaign, index) => {
          console.log(`\n${index + 1}. ${campaign.campaign_name}`);
          console.log(`   Brand: ${campaign.brand_name || campaign.brand || 'N/A'}`);
          console.log(`   Total Leads: ${campaign.total_leads}`);
          console.log(`   Facebook: ${campaign.facebook_results || 0} leads`);
          console.log(`   Zoho: ${campaign.zoho_results || 0} leads`);
          console.log(`   Spent: ‚Çπ${parseFloat(campaign.total_spent || 0).toFixed(2)}`);
          
          if (campaign.avg_facebook_cost_per_lead !== undefined) {
            console.log(`   Facebook Cost/Lead: ‚Çπ${parseFloat(campaign.avg_facebook_cost_per_lead || 0).toFixed(2)}`);
          }
          if (campaign.avg_zoho_cost_per_lead !== undefined) {
            console.log(`   Zoho Cost/Lead: ‚Çπ${parseFloat(campaign.avg_zoho_cost_per_lead || 0).toFixed(2)}`);
          }
        });
        
        const hasEnhancedData = data.topCampaigns.some(c => 
          c.brand_name || c.facebook_results !== undefined || c.zoho_results !== undefined
        );
        
        if (hasEnhancedData) {
          console.log('\n‚úÖ Enhanced campaign data is present!');
        } else {
          console.log('\n‚ö†Ô∏è Enhanced campaign data is missing');
        }
      }
      
      // Check brand performance
      if (data.brandPerformance && data.brandPerformance.length > 0) {
        console.log('\nüè¢ Brand Performance (with enhanced data):');
        data.brandPerformance.slice(0, 3).forEach((brand, index) => {
          console.log(`\n${index + 1}. ${brand.brand_name || brand.brand || 'Unknown'}`);
          console.log(`   Total Leads: ${brand.total_leads}`);
          console.log(`   Total Spent: ‚Çπ${parseFloat(brand.total_spent || 0).toFixed(2)}`);
          console.log(`   Campaigns: ${brand.campaigns_count}`);
          
          if (brand.facebook_results !== undefined) {
            console.log(`   Facebook Results: ${brand.facebook_results}`);
          }
          if (brand.zoho_results !== undefined) {
            console.log(`   Zoho Results: ${brand.zoho_results}`);
          }
          if (brand.avg_facebook_cost_per_lead !== undefined) {
            console.log(`   Avg Facebook Cost/Lead: ‚Çπ${parseFloat(brand.avg_facebook_cost_per_lead || 0).toFixed(2)}`);
          }
          if (brand.avg_zoho_cost_per_lead !== undefined) {
            console.log(`   Avg Zoho Cost/Lead: ‚Çπ${parseFloat(brand.avg_zoho_cost_per_lead || 0).toFixed(2)}`);
          }
        });
      }
      
      console.log('\nüéâ MIGRATION SUCCESS!');
      console.log('‚úÖ Database migration has been applied successfully');
      console.log('‚úÖ Backend API is returning enhanced data with new columns');
      console.log('‚úÖ Brand names, Facebook/Zoho metrics, and calculated costs are working');
      console.log('‚úÖ Your frontend Dashboard will now show consistent, real-time data');
      
    } else {
      console.log('‚ùå Dashboard API request failed:', dashboardResponse.status, dashboardResponse.statusText);
    }
    
  } catch (error) {
    if (error.response) {
      console.error('‚ùå API Error:', error.response.status, error.response.data);
    } else {
      console.error('‚ùå Request Error:', error.message);
    }
  }
}

testDashboardComplete().catch(console.error);
